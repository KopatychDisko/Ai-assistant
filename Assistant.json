{
  "name": "Assistant",
  "nodes": [
    {
      "parameters": {
        "name": "calendarAgent",
        "description": "Call this tool for any calendar action.",
        "workflowId": {
          "__rl": true,
          "value": "JNi7HgoqFmUFv0n4",
          "mode": "list",
          "cachedResultName": "Calendar agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', ``, 'string') }}"
          },
          "matchingColumns": [
            "query"
          ],
          "schema": [
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        1220,
        580
      ],
      "id": "643b369c-28fa-483f-b177-cb4f9cb59ac3",
      "name": "Calendar Agent"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "5f5ce1d9-c97f-4ada-8c8b-c81ad3c798b8",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -140,
        200
      ],
      "webhookId": "b8605f3e-0f52-4ffc-a4c9-1728eb0e09e2",
      "credentials": {
        "telegramApi": {
          "id": "4UH85tgsDHAo2L09",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "name": "researchAgent",
        "description": "Call this tool for any research related actions.",
        "workflowId": {
          "__rl": true,
          "value": "JS5Wrd2d5Zo8zSbn",
          "mode": "list",
          "cachedResultName": "research"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        1400,
        600
      ],
      "id": "5c87eaeb-cca9-402d-8814-3368f5c86c3c",
      "name": "Research Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Valera AI — Personal Strategic Assistant\nYou are Valera, an intelligent AI personal assistant for your owner.\n\nCore Principles:\nAlways start any task by reasoning carefully using the Think Tool before any action.\n\nNEVER act manually — you must delegate operations only through the available tools.\n\nYour primary role: THINK ➔ PLAN ➔ DELEGATE ➔ EXECUTE.\n\nCurrent Tools Available:\nFood Agent - Manage all that depedns on food. Calculate calorises. Give week or daily report for calories and what user eat. If the user specifies a particular dish that needs to be calculated for calories, and no other menu items need to be asked about, simply use the average nutritional value without prompting them for quantities.\n\nCalendar Agent — Manage all meetings, events, deadlines, and personal scheduling.\n\nPersonal Expense Agent — Track, analyze, and report on personal financial data: balances, incomes, expenses, and transactions.\n\nResearch Agent — Search the web for external information when data is missing or needs verification.\n\nCalculator — Perform quick, accurate mathematical calculations when needed.\n\nQdrant Vector Store — Store and retrieve past analyses, memories, thoughts, writing examples, and insights.\n\nZep Long-Term Memory — Recall previous conversations, context, user habits, and preferences to personalize future interactions.\n\nThink Tool — Your first tool to carefully reason, plan, break down tasks, and decide next steps.\n\nRules of Operation:\nAlways start with the Think Tool to reason before acting.\n\nSelect the most appropriate single tool for the next logical step.\n\nFor complex tasks, break them into smaller steps, thinking carefully before each action.\n\nNever invent or hallucinate data.\n\nIf information is missing, retrieve it using the Research Agent or from Memory.\n\nFor contacts:\n\nTo search existing — use Contact Database Agent.\n\nTo add/upload new — use UploadContact Agent.\n\nFor financial tasks — always use the Personal Expense Agent.\n\nFor content analysis — use Upload Agent.\n\nFor content creation — use Create Agent based on uploaded insights.\n\nFor calculations — use the Calculator Tool.\n\nAlways store valuable insights in Qdrant.\n\nAlways recall necessary context from Zep Memory.\n\nContinuous Learning Directive:\nConstantly observe and learn the owner's style, habits, and preferences.\n\nStore important discoveries and personal insights in long-term memory.\n\nAdapt your behavior, tone, and strategies based on evolving user needs.\n\nEvolve into an intuitive, proactive, and indispensable assistant.\n\nCritical Reminders:\nTHINK ➔ PLAN ➔ DELEGATE ➔ EXECUTE — never skip thinking first.\n\nWork strategically, clearly, and efficiently.\n\nMaintain operational excellence at all times.\n\nAlways act loyally, intelligently, and precisely.\n\nExcellence is your minimum standard.\n\nCurrent Date and Time:\n{{ $now }}\n\nYou live in Russia - use time only for this country. In meesage dont write timezone. Avoid symbols that can crash telegram.\n\nCurrent telegram id User:\n{{ $json.message.chat.id }}\n\nStay focused. Grow with your owner. Excellence is your mission.\n\nReturn structed output - answer and photo_url. Answer user every time in just normal text (telegram will die if you send something wrong), but photo url only when you create report food and have url else return in photo url - no"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1200,
        140
      ],
      "id": "0dbee695-465c-432e-a614-96b8ce812724",
      "name": "Assistant Agent",
      "retryOnFail": true
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        1680,
        580
      ],
      "id": "dbd2ec68-77f6-4088-b538-8a2c41bff2fe",
      "name": "Calculator"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "jarvis_core"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryZep",
      "typeVersion": 1.3,
      "position": [
        1080,
        580
      ],
      "id": "51c01020-aaaa-42c7-9d91-5d5f180a16d6",
      "name": "Zep",
      "credentials": {
        "zepApi": {
          "id": "uI23wd1kQlqgujHe",
          "name": "Zep Api account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "jarvis_main",
          "mode": "list",
          "cachedResultName": "jarvis_main"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.1,
      "position": [
        2160,
        140
      ],
      "id": "67050554-6cb3-4375-87ef-b7efdb25605b",
      "name": "Qdrant Vector Store",
      "credentials": {
        "qdrantApi": {
          "id": "JYWFyIjomXR6qCDV",
          "name": "QdrantApi account 2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        2320,
        320
      ],
      "id": "e014604f-fbca-4eae-961a-42e4b3b748f5",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkSize": 1200,
        "chunkOverlap": 50,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2480,
        480
      ],
      "id": "0ecbc3a8-ed27-4da0-8b64-2f32d0768de4",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "jarvis_main",
        "toolDescription": "This is the main knowledge base where you can retrieve information or store new data when you need to learn or access knowledge.",
        "qdrantCollection": {
          "__rl": true,
          "value": "jarvis_main",
          "mode": "list",
          "cachedResultName": "jarvis_main"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.1,
      "position": [
        1960,
        600
      ],
      "id": "fe8565be-58af-4a9f-921c-75920ae613b0",
      "name": "Qdrant Vector Store1",
      "credentials": {
        "qdrantApi": {
          "id": "JYWFyIjomXR6qCDV",
          "name": "QdrantApi account 2"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        1800,
        580
      ],
      "id": "b01db706-90af-4d4a-a83d-32fdffc3d3b7",
      "name": "Think"
    },
    {
      "parameters": {
        "model": "openai/gpt-4.1-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        960,
        540
      ],
      "id": "616b1347-5319-4913-b692-62e65e336837",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "mSL5SDx4X3Y1BWQM",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsHuggingFaceInference",
      "typeVersion": 1,
      "position": [
        2180,
        320
      ],
      "id": "1eafe551-0d4e-4c22-a9b7-ab5b2b6d9aaa",
      "name": "Embeddings HuggingFace Inference",
      "credentials": {
        "huggingFaceApi": {
          "id": "cFlRGXneiD6nyy90",
          "name": "HuggingFaceApi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsHuggingFaceInference",
      "typeVersion": 1,
      "position": [
        1900,
        740
      ],
      "id": "f42f6477-4216-4b26-9712-21e2e631ef80",
      "name": "Embeddings HuggingFace Inference1",
      "credentials": {
        "huggingFaceApi": {
          "id": "cFlRGXneiD6nyy90",
          "name": "HuggingFaceApi account"
        }
      }
    },
    {
      "parameters": {
        "description": "A nutrition management agent that can calculate calorie content of meals, generate daily meal plans, log what the user has eaten, and provide daily or weekly nutrition reports. Input may include foods with quantities, calorie goals, dietary preferences, or date ranges for reports. Output includes structured summaries, meal suggestions, or calorie totals.",
        "workflowId": {
          "__rl": true,
          "value": "DTH75aZc2rC6WU35",
          "mode": "list",
          "cachedResultName": "Food assistant"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', ``, 'string') }}",
            "telegram_id": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('telegram_id', `user telegram id\n`, 'number') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "telegram_id",
              "displayName": "telegram_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1300,
        700
      ],
      "id": "c01df47e-9824-4d1c-893d-7238cdb4c1a9",
      "name": "Food Agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"answer\": \"answer\",\n\t\"photo_url\": \"http\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1620,
        360
      ],
      "id": "82097588-031a-4a52-b7a7-ac7c79da8b6d",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "operation": "sendMediaGroup",
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "media": {
          "media": [
            {
              "media": "={{ $('Assistant Agent').item.json.output.photo_url }}",
              "additionalFields": {
                "caption": "={{ $('Assistant Agent').item.json.output.answer }}"
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "2794ec0d-52e7-48cd-b81e-df4ea1b474c9",
      "name": "Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1920,
        60
      ],
      "webhookId": "047b5ced-f20e-40c2-b19e-c26281fff8a8",
      "credentials": {
        "telegramApi": {
          "id": "4UH85tgsDHAo2L09",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.telegram_id }}",
        "text": "={{ $json.answer }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1920,
        220
      ],
      "id": "998b7599-1385-415a-b367-d11ffe8c7fd8",
      "name": "Telegram",
      "webhookId": "e77eb55c-697f-47ba-8fd0-f63dc87a8a49",
      "credentials": {
        "telegramApi": {
          "id": "4UH85tgsDHAo2L09",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Assistant Agent').item.json.output.photo_url }}",
                    "rightValue": "no",
                    "operator": {
                      "type": "string",
                      "operation": "notEquals"
                    },
                    "id": "c95e11d6-efe3-4830-8837-ceb317d136f7"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Yes"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5286e89f-3ab0-45d4-bad5-ae5bd88f9c8c",
                    "leftValue": "={{ $('Assistant Agent').item.json.output.photo_url }}",
                    "rightValue": "no",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "No"
            }
          ]
        },
        "options": {
          "fallbackOutput": 1,
          "ignoreCase": true,
          "allMatchingOutputs": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1700,
        140
      ],
      "id": "0060d98a-ff23-4102-8485-8f2981c5246c",
      "name": "Have photo"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b305a0cc-476a-44bb-92a7-f257ed9b3b85",
              "name": "telegram_id",
              "value": "={{ $('Telegram Trigger').item.json.message.from.id }}",
              "type": "number"
            },
            {
              "id": "43c4ef00-a424-460c-afb9-f9c2d58e9323",
              "name": "answer",
              "value": "={{ $json.output.answer }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1540,
        140
      ],
      "id": "cf7ce056-dfb4-4f5f-8db8-acabc042f635",
      "name": "save_output"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.voice }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "321c8e8d-5efa-4c7c-8192-67282e81712c"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "24dfd31d-ca8c-4611-89f0-9aa4a81ae547",
                    "leftValue": "={{ $json.message.voice }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        40,
        200
      ],
      "id": "49b5f55f-ea4c-4bd4-9d74-446457eae6c8",
      "name": "Switch"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        180,
        80
      ],
      "id": "f360d8ce-a601-476c-a225-95477ab3af10",
      "name": "Telegram1",
      "webhookId": "1c230926-00ec-4f09-b43e-8381c43e1e88",
      "credentials": {
        "telegramApi": {
          "id": "4UH85tgsDHAo2L09",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.assemblyai.com/v2/upload",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "a80cc3549ace48ee85c90746f4ff198c"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        340,
        80
      ],
      "id": "9acbc356-7521-42c4-9ac7-af7fe3953eda",
      "name": "upload audio"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.assemblyai.com/v2/transcript",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "a80cc3549ace48ee85c90746f4ff198c"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "audio_url",
              "value": "={{ $json.upload_url }}"
            },
            {
              "name": "language_code",
              "value": "ru"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        500,
        80
      ],
      "id": "d1d63d3e-ddd9-4cb9-be5a-77bf1641c354",
      "name": "Make transcript"
    },
    {
      "parameters": {
        "url": "=https://api.assemblyai.com/v2/transcript/{{ $json.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "a80cc3549ace48ee85c90746f4ff198c"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        660,
        80
      ],
      "id": "b7a69210-e514-4df9-8724-2b4507496783",
      "name": "Get text"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "65d64095-2598-4396-95cd-ed3cf079a420",
              "name": "text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        560,
        300
      ],
      "id": "4f21848f-67c2-479c-bd36-82f25245437f",
      "name": "text"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1020,
        -140
      ],
      "id": "95d54995-3ed6-435b-a23d-33e40b538046",
      "name": "Wait",
      "webhookId": "fdd75b52-ca49-4ba2-b667-ab272dc505b1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f2c8f85a-cb86-4289-a6dd-b7ab255b5feb",
              "leftValue": "={{ $json.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        900,
        80
      ],
      "id": "3e5732f9-8135-46bf-a3e1-36d8f2347ae5",
      "name": "Not have text?"
    },
    {
      "parameters": {
        "name": "expenseAgent",
        "description": "Call this tool for any personal expense related actions.",
        "workflowId": {
          "__rl": true,
          "value": "nltSvDzLzRwOB9wQ",
          "mode": "list",
          "cachedResultName": "Finance agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        1540,
        580
      ],
      "id": "66176d23-d421-4079-b86d-c98ebe1f6106",
      "name": "Finance agent"
    }
  ],
  "pinData": {},
  "connections": {
    "Calendar Agent": {
      "ai_tool": [
        [
          {
            "node": "Assistant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research Agent": {
      "ai_tool": [
        [
          {
            "node": "Assistant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Assistant Agent": {
      "main": [
        [
          {
            "node": "save_output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "Assistant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Zep": {
      "ai_memory": [
        [
          {
            "node": "Assistant Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "Assistant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "Assistant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Assistant Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings HuggingFace Inference": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings HuggingFace Inference1": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Food Agent": {
      "ai_tool": [
        [
          {
            "node": "Assistant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Assistant Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Response": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Have photo": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save_output": {
      "main": [
        [
          {
            "node": "Have photo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram1": {
      "main": [
        [
          {
            "node": "upload audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "upload audio": {
      "main": [
        [
          {
            "node": "Make transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Make transcript": {
      "main": [
        [
          {
            "node": "Get text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get text": {
      "main": [
        [
          {
            "node": "Not have text?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "text": {
      "main": [
        [
          {
            "node": "Assistant Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Get text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Not have text?": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Assistant Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store": {
      "main": [
        []
      ]
    },
    "Finance agent": {
      "ai_tool": [
        [
          {
            "node": "Assistant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3bffd581-73d0-47be-863c-799b3ef36d05",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6a800ebc29b853667ca6401bbd86fb0db83376837a93a3b0cb0d04ef52ddbf7c"
  },
  "id": "VFHNtWOOJibug7LF",
  "tags": []
}